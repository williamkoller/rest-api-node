version: '3.8'
services:
  rest-api-node:
    build:
      context: .
      dockerfile: Dockerfile.node
    container_name: rest-api-node
    depends_on:
      - rest-api-node-mongodb
    entrypoint: sh -c 'yarn install --frozen-lockfile && yarn start:dev'
    env_file:
      - ${PATH_ENV}
    ports:
      - ${PORT}:${PORT}
    networks:
      - rest-api-node-net
    volumes:
      - '/app/node_modules'
      - './:/app'

  rest-api-node-dev:
    build:
      context: .
      dockerfile: Dockerfile.node
    container_name: rest-api-node-dev
    depends_on:
      - rest-api-node-mongodb
    entrypoint: sh -c 'yarn install --frozen-lockfile && yarn start:dev'
    env_file:
      - ${PATH_ENV}
    ports:
      - 3003:3003
    networks:
      - rest-api-node-net
    volumes:
      - '/app/node_modules'
      - './:/app'

  rest-api-node-mongodb:
    image: mongo:latest
    container_name: rest-api-node-mongodb
    ports:
      - ${MONGODB_PORT}:${MONGODB_PORT}
    networks:
      - rest-api-node-net
    volumes:
      - /rest-api-mongodb-volume:/data/db

  rest-api-node-nginx:
    build:
      context: .
      dockerfile: Dockerfile.nginx
    container_name: rest-api-node-nginx
    ports:
      - ${NGINX_PORT}:${NGINX_PORT}
    expose:
      - ${NGINX_PORT}
    networks:
      - rest-api-node-net
    links:
      - rest-api-node

  rest-api-node-redis:
    image: redis:latest
    container_name: rest-api-node-redis
    restart: always
    environment:
      ALLOW_EMPTY_PASSWORD: ${ALLOW_EMPTY_PASSWORD}
      REDIS_PORT: ${REDIS_PORT}
      REDIS_HOST: ${REDIS_HOST}
    ports:
      - ${REDIS_PORT}:${REDIS_PORT}
    hostname: ${REDIS_HOST}
    networks:
      - rest-api-node-net
    volumes:
      - rest-api-node-redis-cache:/data
networks:
  rest-api-node-net:

volumes:
  rest-api-mongodb-volume:
  rest-api-node-redis-cache:
